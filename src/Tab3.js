import React, { Component } from 'react';
import logo from './logo.svg';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import RaisedButton from 'material-ui/RaisedButton';
import ReactTable from "react-table";
import LinearProgress from 'material-ui/LinearProgress';
import "react-table/react-table.css";

class Tab3 extends Component {

  constructor(props) {
    super(props)
    this.state = {
      data: [],
      selected: [1],
      scanResult: {},
      isScanning: false
    }
  }

  componentDidMount() {
    //TODO Fetch last scan data
    return fetch('https://account.monitorank.com/api.php?key=2201-sBD0Lh4gzaCO0cpYpllA2CcWXBlNmy8FZBwAJqH8&module=entity&action=get&id_entity=17631&period=20170701-20170724')
    .then((response) => response.json())
    .then((responseJson) => {
      let sorted = responseJson.data.sort((a, b) => {
          return a.query.id - b.query.id;
      });
      this.setState({data: sorted})
    })
    .catch((error) => {
      console.error(error);
    });
  }

  scanServices = (ip, policy_id) => {
    return fetch('http://127.0.0.1:5000/scan_services', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ip: ip,
        policy_id: policy_id,
      })
    })
  }

  searchVulnerabilitiesByCpe = (cpe) => {
    return fetch('http://127.0.0.1:5000/search_vulnerabilities', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cpe: cpe
      })
    })
  }

  saveScanResult = (results) => {
    console.log('SAVING RESULTS')
    return fetch('https://api.ersins.com/scan/save', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(results)
    })
  }

  handleScanButton = () => {
    this.setState({isScanning: true})
    let ips = ['172.17.42.19', '0.0.0.0']
    let policy_id = ['123', '12345']
    let results = {}
    results['ip'] = ips[0]
    results['policy_id'] = policy_id[0]
    results['vulnerabilities'] = []
    this.scanServices(ips[0], policy_id[0])
      .then((results) => results.json())
      .then((resultsJson) => {
        this.setState({isScanning: false});
        let services = resultsJson.services;
        let count = 0
        let recursive = () => {
          let service = services[count++]
          let cpe = service.cpe;
          if (cpe) {
            this.searchVulnerabilitiesByCpe(cpe)
              .then((vulnerabilities) => vulnerabilities.json())
              .then((vulnerabilitiesJson) => {
                vulnerabilitiesJson['vulnerabilities'].map((vulnerability) => {
                  results['vulnerabilities'].push(vulnerability)
                  if (count < services.length) {
                    recursive()
                  } else {
                    this.setState({scanResult: results})
                    this.forceUpdate()
                    // this.saveScanResult(results)
                    //   .then((scanResultResponse) => console.log('scanresult'))
                  }
                })
              })
              .catch((error) => {
                console.error(error);
              });
          } else {
            if (count < services.length) {
                recursive()
            } else {
              this.setState({scanResult: results})
              this.forceUpdate()
              // this.saveScanResult(results)
              //   .then((scanResultResponse) => console.log('scanresult'))
            }
          }
        }
        recursive()
        })
  }

  render() {
    let tableData = [];
    if (this.state.scanResult && this.state.scanResult.vulnerabilities && this.state.scanResult.vulnerabilities.length > 0) {
      this.state.scanResult.vulnerabilities.map((vulnerability) => {
            vulnerability['ip'] = this.state.scanResult.ip
            vulnerability['policy_id'] = this.state.policy_id
            tableData.push(vulnerability)
        })
    }
    // } else {
    //   console.log('FALSE')
    //   //INITIAL DATA
    //   tableData = this.state.data
    // }

    const columns = [
      {
        Header: "VULNERABILITY",
        id: 'vulnerability',
        accessor: 'vulnerability',
      }, {
        Header: "VULNERABILITY_TEXT",
        id: 'vulnerability_text',
        accessor: 'vulnerability_text'
      },
      {
        Header: "SCORE",
        id: 'score',
        accessor: 'score'
    }];
    let button = null;
    if (!this.state.isScanning) {
      button = <RaisedButton label="START SCAN" secondary={true} style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}}
                      onClick={this.handleScanButton.bind(this)}/>
    } else {
      button = <RaisedButton label="SCANNING..." disabled={true} style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}}/>
    }

    return (
      <div>
          {this.state.isScanning ? <LinearProgress mode="indeterminate" color="#455A64" /> : null}
          {button}
          <ReactTable
            data={tableData}
            filterable
            columns={columns}
            className="-striped -highlight"
            style={{overflow: 'visible'}}
          />
        </div>
    );
  }
}

export default Tab3;
