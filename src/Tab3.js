import React, { Component } from 'react';
import logo from './logo.svg';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import RaisedButton from 'material-ui/RaisedButton';
import ReactTable from "react-table";
import LinearProgress from 'material-ui/LinearProgress';
import "react-table/react-table.css";
import {browserHistory} from 'react-router';
import {reactLocalStorage} from 'reactjs-localstorage';
const base64 = require('base-64');
// const PROTOCOL = 'http'
// const API_IP = '172.16.65.2'
// const API_PORT = '5000'
const PROTOCOL = 'http'
const API_IP = '207.154.236.102'
const API_PORT = '5000'

class Tab3 extends Component {

  constructor(props) {
    super(props)
    this.state = {
      data: [],
      selected: [1],
      scanResults: [],
      isScanning: false,
      isLoadingLast: false,
      token: '',
      logs: []
    }
  }

  componentDidMount() {
    console.log('FETCHING LAST SCAN DATA FROM DABASE')
    this.setState({isLoadingLast: true})
    // setInterval(() => {
      this.getSummary()
      .then((response) => {
        if (response.status == 401) {
          browserHistory.push('/login');
        } else if (response.ok){
          return response.json()
        }
      })
      .then((responseJson) => {
        console.log('FETCHING LAST SCAN DATA FROM DATABASE DONE')
        console.log(responseJson)
        responseJson = responseJson.sort((a,b) => {return new Date(b.date_time_started) - new Date(a.date_time_started)});
        this.setState({scanResults: responseJson, isLoadingLast: false})
      })
      .catch((error) => {
        this.setState({isLoadingLast: false})
        console.error(error);
      });
    // }, 10000)
  }

  getSummary = () => {
    let token = reactLocalStorage.get('token');
    let headers = new Headers();
    console.log(token)
    headers.append("Authorization", "Basic " + base64.encode(token+":x"));
    return fetch(`${PROTOCOL}://${API_IP}:${API_PORT}/last_status`, {
      headers: headers
    })
  }

  startScan = () => {
    return fetch(`${PROTOCOL}://${API_IP}:${API_PORT}/start_scan`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({text: 'text'})
    })
  }

  saveScanResult = (results) => {
    console.log('SAVING RESULTS')
    return fetch('https://api.ersins.com/scan/save', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(results)
    })
  }

  updateDb = () => {
    let token = reactLocalStorage.get('token');
    let headers = new Headers();
    headers.append("Authorization", "Basic " + base64.encode(token+":x"));
    headers.append("Content-Type", "application/json");
    headers.append("Accept", "application/json");
    return fetch(`${PROTOCOL}://${API_IP}:${API_PORT}/update_db`, {
      method: 'POST',
      headers: headers,
      body: JSON.stringify({"test": "test"})
    })
  }

  handleUpdateButton = () => {
    console.log('UPDATE DATABASE HANDLER')
    this.setState({isLoadingLast: true})
    this.updateDb()
      .then((response) => {
        if (response.status == 401) {
          browserHistory.push('/login');
        } else if (response.ok){
          return response.json()
        }
      })
      .then((responseJson) => {
        console.log('UPDATE DATABASE HANDLER DONE')
        console.log(responseJson)
        alert(responseJson)
        this.setState({isLoadingLast: false})
      })
      .catch((error) => {
        this.setState({isLoadingLast: false})
        console.log(error)
      })
  }

  handleScanButton = () => {
    this.setState({isScanning: true})
    this.startScan()
     .then((response) => response = response.json())
     .then((responseJson) => {
       console.log(responseJson)
       this.setState({scanResults: responseJson, isScanning: false})
     })
      .catch((error) => {
        this.setState({isScanning: false})
        console.log(error)
      })

  }

  render() {
    let tableData = [];

    const columns = [
      {
        Header: "IP",
        id: 'ip',
        accessor: 'ip',
      },{
        Header: "POLICY_ID",
        id: 'policy_key',
        accessor: 'policy_key',
      },{
        Header: "DATE/TIME REQUESTED",
        id: 'date_time_requested',
        accessor: 'date_time_requested',
      },{
        Header: "DATE/TIME STARTED",
        id: 'date_time_started',
        accessor: 'date_time_started',
      },{
        Header: "DATE/TIME COMPLETED",
        id: 'date_time_completed',
        accessor: 'date_time_completed',
      },{
        Header: "STATUS",
        id: 'status',
        accessor: 'status',
      }
    ];
    let buttons = null;
    if (!this.state.isScanning && !this.state.isLoadingLast) {
      buttons =
      <div>
       <RaisedButton label="UPDATE DATABASE" style={{display: 'block', marginTop: 2, marginBottom: 2}} backgroundColor="#66BB6A" labelColor="#ffffff"
                        onClick={this.handleUpdateButton.bind(this)}/>
      </div>
    } else if (!this.state.isLoadingLast){
      buttons = <RaisedButton label="SCANNING..." style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}} backgroundColor="#E0E0E0" labelColor="#ffffff"/>
    } else {
      buttons = <RaisedButton label="PLEASE WAIT..." style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}} backgroundColor="#E0E0E0" labelColor="#ffffff"/>
    }

    return (
      <div>
          {this.state.isScanning ? <LinearProgress mode="indeterminate" color="#455A64" /> : null}
          {buttons}
          <ReactTable
            data={this.state.scanResults}
            filterable
            columns={columns}
            className="-striped -highlight"
            style={{overflow: 'visible'}}
          />
        </div>
    );
  }
}

export default Tab3;
