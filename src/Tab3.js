import React, { Component } from 'react';
import logo from './logo.svg';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import RaisedButton from 'material-ui/RaisedButton';
import ReactTable from "react-table";
import LinearProgress from 'material-ui/LinearProgress';
import "react-table/react-table.css";

class Tab3 extends Component {

  constructor(props) {
    super(props)
    this.state = {
      data: [],
      selected: [1],
      scanResults: [],
      tableData: [],
      isScanning: false,
      logs: []
    }
  }

  componentDidMount() {
    //TODO Fetch last scan data
    console.log('FETCHING LAST SCAN DATA FROM DABASE')
    return fetch('http://207.154.236.102:5000/last_scan')
    .then((response) => response.json())
    .then((responseJson) => {
      console.log('FETCHING LAST SCAN DATA FROM DATABASE DONE')
      this.setState({scanResults: responseJson})
    })
    .catch((error) => {
      console.error(error);
    });
  }

  scanServices = (ip, policy_id) => {
    return fetch('http://207.154.236.102:5000/scan_services', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ip: ip,
        policy_id: policy_id,
      })
    })
  }

  searchVulnerabilitiesByCpe = (cpe) => {
    cpe = cpe.substring(7)
    return fetch('http://207.154.236.102:5000/search_vulnerabilities', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cpe: cpe
      })
    })
  }

  saveScanResult = (results) => {
    console.log('SAVING RESULTS')
    return fetch('https://api.ersins.com/scan/save', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(results)
    })
  }

  handleScanButton = () => {
    this.setState({isScanning: true})
    //TODO get ips dynamically and iterate over it
    let ips = [{"ip": "127.0.0.1", "policy_id": "1"}, {"ip": "0.0.0.0", "policy_id": "2"}]
    let finalResults = []
    let countIp = 0
    let recursiveIps = () => {
      let ip = ips[countIp].ip
      let policy = ips[countIp++].policy_id
      let results = {}
      results['ip'] = ip
      results['policy_id'] = policy
      results['vulnerabilities'] = []
      this.scanServices(ip, policy)
        .then((results) => results.json())
        .then((resultsJson) => {
          console.log(`COMENZANDO SCANNING IP ${ip}`)
          let services = resultsJson.services;
          console.log(`SERVICIOS ENCONTRADOS: ${services.length}`)
          let count = 0
          let recursive = () => {
            let service = services[count++]
            console.log(`SERVICIO: #${count}`)
            console.log(`SERVICIO DESC: ${JSON.stringify(service)}`)
            // let cpe = service.cpe
            let cpe = 'cpe:/a:freebsd:1.1.5.1'
            if (cpe) {
              console.log(`EL SERVICIO CUENTA CON CPE NAME`)
              console.log('BUSCANDO VULNERABILIDADES')
              this.searchVulnerabilitiesByCpe(cpe)
                .then((vulnerabilities) => vulnerabilities.json())
                .then((vulnerabilitiesJson) => {
                  vulnerabilitiesJson['vulnerabilities'].forEach((vulnerability) => {
                    vulnerability['port'] = service.port
                    vulnerability['service'] = service.name
                    vulnerability['version'] = service.version
                    console.log(`VULNERABILIDAD: ${JSON.stringify(vulnerability)}`)
                    console.log(`AGREGANDO VULNERABILIDAD AL RESTULADO DEL SCANNING DEL IP ${ip}`)
                    results['vulnerabilities'].push(vulnerability)
                  })
                  if (count < services.length) {
                    recursive()
                  } else {
                    console.log(`TERMINO DE EJECUTAR EL SERVICIO ${JSON.stringify(service)}`)
                    if (countIp < ips.length) {
                      console.log(`GUARDANDO RESULTADO EN EL ARRAY Y HACIENDO EL POST EN EL API PROVEIDO --> ${ip}`)
                      console.log(results)
                      finalResults.push(results)
                      // this.saveScanResult(results)
                      //   .then((scanResultResponse) => console.log('scanresult'))
                      recursiveIps()
                    } else {
                      console.log(`GUARDANDO RESULTADO EN EL ARRAY Y HACIENDO EL POST EN EL API PROVEIDO --> ${ip}`)
                      console.log(results)
                      finalResults.push(results)
                      // this.saveScanResult(results)
                      //   .then((scanResultResponse) => console.log('scanresult'))
                      console.log(`ULTIMO IP`)
                      console.log('PRINTING FINAL RESULTS')
                      console.log(finalResults)
                      this.setState({isScanning: false});
                      this.setState({scanResults:finalResults})
                    }
                  }
                })
                .catch((error) => {
                  console.error(error);
                });
            } else {
              //TODO UNCOMENT AND THES WITHOUT CPENAME
              console.log('EL SERVICIO NO CUENTA CON CPENAME')
              if (count < services.length) {
                  recursive()
              } else {
                console.log(`TERMINO DE EJECUTAR EL SERVICIO ${JSON.stringify(service)}`)
                if (countIp < ips.length) {
                  console.log('COMO NO TUVO CPENAME PERO HAY MAS IPS QUE RECORRER, NO HUBO RESULTADO QUE AGREGAR')
                  recursiveIps()
                } else {
                  console.log(`ULTIMO IP`)
                  finalResults.forEach((item) => {
                    if (item && item.vulnerabilities && item.vulnerabilities.length > 0) {
                      let tableData = []
                      item.vulnerabilities.map((vulnerability) => {
                        vulnerability['ip'] = item.ip
                        vulnerability['policy_id'] = item.policy_id
                        tableData.push(vulnerability)
                      })
                      this.setState({scanResults:tableData})
                    }
                  });
                }
              }
            }
          }
          recursive()
          })
    }
    recursiveIps()
  }

  render() {
    let tableData = [];

    const columns = [
      {
        Header: "IP",
        id: 'ip',
        accessor: 'ip',
      },{
        Header: "POLICY",
        id: 'policy_id',
        accessor: 'policy_id',
      },{
        Header: "PORT",
        id: 'port',
        accessor: 'port',
      },{
        Header: "SERVICE",
        id: 'service',
        accessor: 'service',
      },{
        Header: "VERSION",
        id: 'version',
        accessor: 'version',
      },{
        Header: "VULNERABILITY",
        id: 'vulnerability',
        accessor: 'vulnerability',
      }, {
        Header: "VULNERABILITY_TEXT",
        id: 'vulnerability_text',
        accessor: 'vulnerability_text'
      },
      {
        Header: "SCORE",
        id: 'score',
        accessor: 'score'
    }];
    let buttons = null;
    if (!this.state.isScanning) {
      buttons =
      <div>
       <RaisedButton label="START NEW SCAN" style={{display: 'block', marginTop: 2, marginBottom: 2}} backgroundColor="#E57373" labelColor="#ffffff"
                        onClick={this.handleScanButton.bind(this)}/>
       <RaisedButton label="UPDATE DATABASE" style={{display: 'block', marginTop: 2, marginBottom: 2}} backgroundColor="#66BB6A" labelColor="#ffffff"
                        onClick={this.handleScanButton.bind(this)}/>
      </div>
    } else {
      buttons = <RaisedButton label="SCANNING..." style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}} backgroundColor="#E0E0E0" labelColor="#ffffff"/>
    }

    return (
      <div>
          {this.state.isScanning ? <LinearProgress mode="indeterminate" color="#455A64" /> : null}
          {buttons}
          <ReactTable
            data={this.state.scanResults}
            filterable
            columns={columns}
            className="-striped -highlight"
            style={{overflow: 'visible'}}
          />
        </div>
    );
  }
}

export default Tab3;
