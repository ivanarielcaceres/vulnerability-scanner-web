import React, { Component } from 'react';
import logo from './logo.svg';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import RaisedButton from 'material-ui/RaisedButton';
import ReactTable from "react-table";
import LinearProgress from 'material-ui/LinearProgress';
import "react-table/react-table.css";

class Tab3 extends Component {

  constructor(props) {
    super(props)
    this.state = {
      data: [],
      selected: [1],
      scanResult: {
        ip: '',
        policy_id: '',
        vulnerabilities: [
          {
           port: '',
           vulnerability: '',
           vulnerability_text: '',
           score: ''
         }
        ]
      },
      isScanning: false
    }
  }

  componentDidMount() {
    //TODO Fetch last scan data
    return fetch('https://account.monitorank.com/api.php?key=2201-sBD0Lh4gzaCO0cpYpllA2CcWXBlNmy8FZBwAJqH8&module=entity&action=get&id_entity=17631&period=20170701-20170724')
    .then((response) => response.json())
    .then((responseJson) => {
      let sorted = responseJson.data.sort((a, b) => {
          return a.query.id - b.query.id;
      });
      this.setState({data: sorted})
    })
    .catch((error) => {
      console.error(error);
    });
  }

  scanServices = (ip, policy_id) => {
    return fetch('http://127.0.0.1:5000/scan_services', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ip: ip,
        policy_id: policy_id,
      })
    })
  }

  searchVulnerabilitiesByCpe = (cpe) => {
    return fetch('http://127.0.0.1:5000/search_vulnerabilities', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cpe: cpe
      })
    })
  }

  handleScanButton = () => {
    this.setState({isScanning: true})
    let ips = ['127.0.0.1', '0.0.0.0']
    let results = {}
    results['ip'] = ips[0]
    results['policy_id'] = '123456'
    results['vulnerabilities'] = []
    this.scanServices(ips[0], '123456')
      .then((results) => results.json())
      .then((resultsJson) => {
        this.setState({isScanning: false});
        let services = resultsJson.services;
        Promise.all(services.map((service) => {
            let cpe = service.cpe;
            if (cpe) {
              this.searchVulnerabilitiesByCpe(cpe)
                .then((vulnerabilities) => vulnerabilities.json())
                .then((vulnerabilitiesJson) => {
                  vulnerabilitiesJson['vulnerabilities'].forEach((vulnerability) => {
                    results['vulnerabilities'].push(vulnerability)
                  })
                })
                .catch((error) => {
                  console.error(error);
                });
            }
          })
      ).then((response) => {console.log(response)})
    });
  }

  render() {
    const columns = [{
      Header: "IP",
      id: 'ip',
      accessor: d => d.query.keywords
    },
    {
      Header: "SERVICIO",
      id: 'service',
      accessor: d => d.query.date,
    },{
      Header: "VERSION",
      id: 'version',
      accessor: d => d.query.date,
    }, {
      Header: "VULNERABILITY",
      id: 'vulnerability',
      accessor: d => d.query.device,
    },
    {
      Header: "DATE",
      id: 'date',
      accessor: d => d.query.localisation,
    }];
    let button = null;
    if (!this.state.isScanning) {
      button = <RaisedButton label="START SCAN" secondary={true} style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}}
                      onClick={this.handleScanButton.bind(this)}/>
    } else {
      button = <RaisedButton label="SCANNING..." disabled={true} style={{display: 'block', marginTop: 2, marginBottom: 2, color:"red"}}/>
    }

    return (
      <div>
          {this.state.isScanning ? <LinearProgress mode="indeterminate" color="#455A64" /> : null}
          {button}
          <ReactTable
            data={this.state.data}
            filterable
            columns={columns}
            className="-striped -highlight"
            style={{overflow: 'visible'}}
          />
        </div>
    );
  }
}

export default Tab3;
